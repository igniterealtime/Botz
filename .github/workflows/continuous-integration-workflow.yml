name: Botz CI

env:
  CI: true

on: [push, pull_request]

jobs:
  build:

    name: Build Botz from source
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java: [ 1.8, 11, 17 ]

    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK ${{ matrix.java }}
        uses: actions/setup-java@v1
        with:
          java-version: ${{ matrix.java }}
      - name: Cache Maven repository
        uses: actions/cache@v1
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-java${{ matrix.java }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-java${{ matrix.java }}-maven-
            ${{ runner.os }}-
      - name: Build with Maven
        run: mvn -B package --file pom.xml
      - name: Upload distribution
        uses: actions/upload-artifact@v2
        with:
          name: distribution-java${{ matrix.java }}
          path: target/botz-*.jar

  check_branch:
    runs-on: ubuntu-latest
    outputs:
      is_publishable_branch: ${{ steps.check-branch.outputs.is_publishable_branch }}
    steps:
      - name: check branch ${{ github.ref }} is either main or a version number
        id: check-branch
        run: |
          if [[ ${{ github.ref }} == 'refs/heads/main' || ${{ github.ref }} =~ refs\/heads\/[0-9]+\.[0-9]+ ]]; then
            echo "::set-output name=is_publishable_branch::true"
          else
            echo "::set-output name=is_publishable_branch::false"
          fi

  publish-maven:

    name: Publish to Maven
    runs-on: ubuntu-latest
    needs: [build, check_branch]
    if: ${{github.repository == 'igniterealtime/Botz' && github.event_name == 'push' && ( needs.check_branch.outputs.is_publishable_branch == 'true' || contains(github.ref, 'refs/tags/') ) }}

    steps:
      - uses: actions/checkout@v2
        with:
          # Defend against another commit quickly following the first
          # We want the one that's been tested, rather than the head of main
          ref: ${{ github.event.push.after }}
      - id: get-id
        name: Compute needed variables
        run: |
          set -x
          tag=$(echo ${{ github.ref }} | cut -d '/' -f3)
          echo "::set-output name=tag::$tag"
          echo "tag is '$tag'"
          version=$(echo ${{ github.ref }} | cut -d '/' -f3 | cut -c 2-)
          echo "::set-output name=version::$version"
          echo "version is '$version'"
          rel_id=$(curl -sL https://api.github.com/repos/${{github.repository}}/releases | jq -r --arg TAG "$tag" '.[] | select(.tag_name==$TAG) | .id')
          echo ::set-output name=rel_id::$rel_id
          echo "rel_id is '$rel_id'"

      - name: Cache Maven repository
        uses: actions/cache@v1
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-java11-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-java11-maven-
            ${{ runner.os }}-
      - name: Set up Java for publishing
        uses: actions/setup-java@v1
        with:
          java-version: 11
          server-id: igniterealtime
          server-username: IGNITE_REALTIME_MAVEN_USERNAME
          server-password: IGNITE_REALTIME_MAVEN_PASSWORD
      - name: Publish
        run: mvn -B deploy
        env:
          IGNITE_REALTIME_MAVEN_USERNAME: ${{ secrets.IGNITE_REALTIME_MAVEN_USERNAME }}
          IGNITE_REALTIME_MAVEN_PASSWORD: ${{ secrets.IGNITE_REALTIME_MAVEN_PASSWORD }}
      - name: Push Artifact to Github Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: https://uploads.github.com/repos/${{ github.repository }}/releases/${{ steps.get-id.outputs.rel_id }}/assets
          asset_path: target/botz-${{ steps.get-id.outputs.version }}.jar
          asset_name: botz-${{ steps.get-id.outputs.version }}.jar
          asset_content_type: application/java-archive

